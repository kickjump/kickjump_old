datasource db {
  provider             = "mysql"
  url                  = env("DATABASE_URL")
  referentialIntegrity = "prisma"
}

generator js {
  provider        = "prisma-client-js"
  output          = "./dist"
  previewFeatures = ["referentialIntegrity"]
}

model Account {
  /// The unique identifier.
  id String @id @default(cuid())

  /// The userId on the authentication service.
  userId String @map("user_id")

  /// The type of account.
  type String

  /// The name of the provider for this account. In this case GitHub is the only option.
  provider          String
  providerAccountId String  @map("provider_account_id")
  refresh_token     String? @db.Text

  /// This is a GitHub login specific field which allows for next-auth to
  //automatically refresh the token.
  refresh_token_expires_in Int?

  /// The access token for this account.
  access_token String? @db.Text

  /// The timestamp of when the token expires.
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String? @db.Text
  session_state      String?
  oauth_token_secret String?
  oauth_token        String?

  /// When the database record was first created.
  createdAt DateTime @default(now()) @map("created_at")

  /// When the database record was last updated.
  updatedAt DateTime @updatedAt @map("updated_at")

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model User {
  /// The unique identifier.
  id            String       @id @default(cuid())
  /// The name of the user which is retrieved from their GitHub profile when signing up.
  name          String?
  /// The primary email address for this user.
  email         String?      @unique
  /// The date the email was verified.
  emailVerified DateTime?    @map("email_verified")
  /// A profile image url if one exists.
  image         String?
  /// Connected authentication accounts for this user.
  accounts      Account[]
  /// A user can attach multiple wallets to their profile. Once attached a
  /// wallet can be used to sign in.
  wallets       UserWallet[]
  /// When the database record was first created.
  createdAt     DateTime     @default(now()) @map("created_at")
  /// When the database record was last updated.
  updatedAt     DateTime     @updatedAt @map("updated_at")

  @@map("users")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verificationtokens")
}

/// Each wallet can be attached to a maximum of one user.
model UserWallet {
  /// The wallet public key. If a user wants to transfer the wallet to another
  /// user they must first delete it from their current user account.
  publicKey String @unique @map("public_key")

  /// The userId field for the foreign key.
  userId String @map("user_id")

  /// When the database record was first created.
  createdAt DateTime @default(now()) @map("created_at")

  /// The owner of this wallet.
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

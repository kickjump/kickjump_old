# generated by patch-package 6.4.8 on 2022-01-24 15:10:19
#
# command:
#   npx patch-package @remix-run/serve
#
# declared package:
#   @remix-run/serve: ^1.1.3
#
diff --git a/node_modules/@remix-run/serve/cli.js b/node_modules/@remix-run/serve/cli.js
index f63790f..1fc7e66 100755
--- a/node_modules/@remix-run/serve/cli.js
+++ b/node_modules/@remix-run/serve/cli.js
@@ -9,36 +9,38 @@
  *
  * @license MIT
  */
-'use strict';
+ 'use strict';
 
-require('./env');
-var path = require('path');
-var os = require('os');
-var index = require('./index');
+ require('./env');
+ var path = require('path');
+ var os = require('os');
+ var index = require('./index');
 
-function _interopDefaultLegacy (e) { return e && typeof e === 'object' && 'default' in e ? e : { 'default': e }; }
+ function _interopDefaultLegacy (e) { return e && typeof e === 'object' && 'default' in e ? e : { 'default': e }; }
 
-var path__default = /*#__PURE__*/_interopDefaultLegacy(path);
-var os__default = /*#__PURE__*/_interopDefaultLegacy(os);
+ var path__default = /*#__PURE__*/_interopDefaultLegacy(path);
+ var os__default = /*#__PURE__*/_interopDefaultLegacy(os);
 
-let port = process.env.PORT || 3000;
-let buildPathArg = process.argv[2];
+ let port = process.env.PORT || 3000;
+ let buildPathArg = process.argv[2];
 
-if (!buildPathArg) {
-  console.error(`
-  Usage: remix-serve <build-dir>`);
-  process.exit(1);
-}
+ if (!buildPathArg) {
+   console.error(`
+   Usage: remix-serve <build-dir>`);
+   process.exit(1);
+ }
 
-let buildPath = path__default["default"].resolve(process.cwd(), buildPathArg);
-index.createApp(buildPath).listen(port, () => {
-  var _Object$values$flat$f;
+ let buildPath = path__default["default"].resolve(process.cwd(), buildPathArg);
+ index.createApp(buildPath).then(server => {
+   server.listen(port, () => {
+     var _Object$values$flat$f;
 
-  let address = (_Object$values$flat$f = Object.values(os__default["default"].networkInterfaces()).flat().find(ip => (ip === null || ip === void 0 ? void 0 : ip.family) == "IPv4" && !ip.internal)) === null || _Object$values$flat$f === void 0 ? void 0 : _Object$values$flat$f.address;
+     let address = (_Object$values$flat$f = Object.values(os__default["default"].networkInterfaces()).flat().find(ip => (ip === null || ip === void 0 ? void 0 : ip.family) == "IPv4" && !ip.internal)) === null || _Object$values$flat$f === void 0 ? void 0 : _Object$values$flat$f.address;
 
-  if (!address) {
-    throw new Error("Could not find an IPv4 address.");
-  }
+     if (!address) {
+       throw new Error("Could not find an IPv4 address.");
+     }
 
-  console.log(`Remix App Server started at http://${address}:${port}`);
-});
+     console.log(`Remix App Server started at http://${address}:${port}`);
+   });
+ });
diff --git a/node_modules/@remix-run/serve/index.d.ts b/node_modules/@remix-run/serve/index.d.ts
index a9b0c58..9f38633 100644
--- a/node_modules/@remix-run/serve/index.d.ts
+++ b/node_modules/@remix-run/serve/index.d.ts
@@ -1 +1 @@
-export declare function createApp(buildPath: string, mode?: string): import("express-serve-static-core").Express;
+export declare function createApp(buildPath: string, mode?: string): Promise<import("express-serve-static-core").Express>;
diff --git a/node_modules/@remix-run/serve/index.js b/node_modules/@remix-run/serve/index.js
index 5204076..0379c44 100644
--- a/node_modules/@remix-run/serve/index.js
+++ b/node_modules/@remix-run/serve/index.js
@@ -8,42 +8,42 @@
  *
  * @license MIT
  */
-'use strict';
+ 'use strict';
 
-Object.defineProperty(exports, '__esModule', { value: true });
+ Object.defineProperty(exports, '__esModule', { value: true });
 
-var express = require('express');
-var compression = require('compression');
-var morgan = require('morgan');
-var express$1 = require('@remix-run/express');
+ var express = require('express');
+ var compression = require('compression');
+ var morgan = require('morgan');
+ var express$1 = require('@remix-run/express');
 
-function _interopDefaultLegacy (e) { return e && typeof e === 'object' && 'default' in e ? e : { 'default': e }; }
+ function _interopDefaultLegacy (e) { return e && typeof e === 'object' && 'default' in e ? e : { 'default': e }; }
 
-var express__default = /*#__PURE__*/_interopDefaultLegacy(express);
-var compression__default = /*#__PURE__*/_interopDefaultLegacy(compression);
-var morgan__default = /*#__PURE__*/_interopDefaultLegacy(morgan);
+ var express__default = /*#__PURE__*/_interopDefaultLegacy(express);
+ var compression__default = /*#__PURE__*/_interopDefaultLegacy(compression);
+ var morgan__default = /*#__PURE__*/_interopDefaultLegacy(morgan);
 
-function createApp(buildPath, mode = "production") {
-  let app = express__default["default"]();
-  app.use(compression__default["default"]());
-  app.use(express__default["default"].static("public", {
-    immutable: true,
-    maxAge: "1y"
-  }));
-  app.use(morgan__default["default"]("tiny"));
-  app.all("*", mode === "production" ? express$1.createRequestHandler({
-    build: require(buildPath),
-    mode
-  }) : (req, res, next) => {
-    // require cache is purged in @remix-run/dev where the file watcher is
-    let build = require(buildPath);
+ async function createApp(buildPath, mode = "production") {
+   let app = express__default["default"]();
+   app.use(compression__default["default"]());
+   app.use(express__default["default"].static("public", {
+     immutable: true,
+     maxAge: "1y"
+   }));
+   app.use(morgan__default["default"]("tiny"));
+   app.all("*", mode === "production" ? express$1.createRequestHandler({
+     build: await import(buildPath),
+     mode
+   }) : (req, res, next) => {
+     // require cache is purged in @remix-run/dev where the file watcher is
+     let build = await import(buildPath);
 
-    return express$1.createRequestHandler({
-      build,
-      mode
-    })(req, res, next);
-  });
-  return app;
-}
+     return express$1.createRequestHandler({
+       build,
+       mode
+     })(req, res, next);
+   });
+   return app;
+ }
 
-exports.createApp = createApp;
+ exports.createApp = createApp;

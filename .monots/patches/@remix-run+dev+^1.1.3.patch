# generated by patch-package 6.4.8 on 2022-01-24 15:09:44
#
# command:
#   npx patch-package @remix-run/dev
#
# declared package:
#   @remix-run/dev: ^1.1.3
#
diff --git a/node_modules/@remix-run/dev/.DS_Store b/node_modules/@remix-run/dev/.DS_Store
new file mode 100644
index 0000000..004ddd3
Binary files /dev/null and b/node_modules/@remix-run/dev/.DS_Store differ
diff --git a/node_modules/@remix-run/dev/cli/commands.js b/node_modules/@remix-run/dev/cli/commands.js
index bf9ab88..2001be6 100644
--- a/node_modules/@remix-run/dev/cli/commands.js
+++ b/node_modules/@remix-run/dev/cli/commands.js
@@ -8,211 +8,212 @@
  *
  * @license MIT
  */
-'use strict';
-
-Object.defineProperty(exports, '__esModule', { value: true });
-
-var path = require('path');
-var os = require('os');
-var fse = require('fs-extra');
-var exitHook = require('exit-hook');
-var prettyMs = require('pretty-ms');
-var WebSocket = require('ws');
-var build$1 = require('../build.js');
-var compiler = require('../compiler.js');
-var config = require('../config.js');
-var format = require('../config/format.js');
-var setup$1 = require('../setup.js');
-
-function _interopDefaultLegacy (e) { return e && typeof e === 'object' && 'default' in e ? e : { 'default': e }; }
-
-function _interopNamespace(e) {
-  if (e && e.__esModule) return e;
-  var n = Object.create(null);
-  if (e) {
-    Object.keys(e).forEach(function (k) {
-      if (k !== 'default') {
-        var d = Object.getOwnPropertyDescriptor(e, k);
-        Object.defineProperty(n, k, d.get ? d : {
-          enumerable: true,
-          get: function () { return e[k]; }
-        });
-      }
-    });
-  }
-  n["default"] = e;
-  return Object.freeze(n);
-}
-
-var path__namespace = /*#__PURE__*/_interopNamespace(path);
-var os__default = /*#__PURE__*/_interopDefaultLegacy(os);
-var fse__namespace = /*#__PURE__*/_interopNamespace(fse);
-var exitHook__default = /*#__PURE__*/_interopDefaultLegacy(exitHook);
-var prettyMs__default = /*#__PURE__*/_interopDefaultLegacy(prettyMs);
-var WebSocket__default = /*#__PURE__*/_interopDefaultLegacy(WebSocket);
-
-async function setup(platformArg) {
-  let platform = setup$1.isSetupPlatform(platformArg) ? platformArg : setup$1.SetupPlatform.Node;
-  await setup$1.setupRemix(platform);
-  console.log(`Successfully setup Remix for ${platform}.`);
-}
-async function routes(remixRoot, formatArg) {
-  let config$1 = await config.readConfig(remixRoot);
-  let format$1 = format.isRoutesFormat(formatArg) ? formatArg : format.RoutesFormat.jsx;
-  console.log(format.formatRoutes(config$1.routes, format$1));
-}
-async function build(remixRoot, modeArg, sourcemap = false) {
-  let mode = build$1.isBuildMode(modeArg) ? modeArg : build$1.BuildMode.Production;
-  console.log(`Building Remix app in ${mode} mode...`);
-
-  if (modeArg === build$1.BuildMode.Production && sourcemap) {
-    console.warn("\n⚠️⚠️⚠️⚠️⚠️⚠️⚠️⚠️⚠️⚠️⚠️⚠️⚠️⚠️⚠️⚠️⚠️⚠️⚠️⚠️⚠️⚠️⚠️⚠️⚠️⚠️⚠️⚠️⚠️⚠️⚠️⚠️⚠️⚠️⚠️⚠️⚠️⚠️⚠️⚠️⚠️⚠️");
-    console.warn("You have enabled source maps in production. This will make your server side code visible to the public and is highly discouraged! If you insist, please ensure you are using environment variables for secrets and not hard-coding them into your source!");
-    console.warn("⚠️⚠️⚠️⚠️⚠️⚠️⚠️⚠️⚠️⚠️⚠️⚠️⚠️⚠️⚠️⚠️⚠️⚠️⚠️⚠️⚠️⚠️⚠️⚠️⚠️⚠️⚠️⚠️⚠️⚠️⚠️⚠️⚠️⚠️⚠️⚠️⚠️⚠️⚠️⚠️⚠️⚠️\n");
-  }
-
-  let start = Date.now();
-  let config$1 = await config.readConfig(remixRoot);
-  await compiler.build(config$1, {
-    mode: mode,
-    sourcemap
-  });
-  console.log(`Built in ${prettyMs__default["default"](Date.now() - start)}`);
-}
-async function watch(remixRootOrConfig, modeArg, callbacks) {
-  let {
-    onInitialBuild,
-    onRebuildStart
-  } = callbacks || {};
-  let mode = build$1.isBuildMode(modeArg) ? modeArg : build$1.BuildMode.Development;
-  console.log(`Watching Remix app in ${mode} mode...`);
-  let start = Date.now();
-  let config$1 = typeof remixRootOrConfig === "object" ? remixRootOrConfig : await config.readConfig(remixRootOrConfig);
-  let wss = new WebSocket__default["default"].Server({
-    port: config$1.devServerPort
-  });
-
-  function broadcast(event) {
-    setTimeout(() => {
-      wss.clients.forEach(client => {
-        if (client.readyState === WebSocket__default["default"].OPEN) {
-          client.send(JSON.stringify(event));
-        }
-      });
-    }, config$1.devServerBroadcastDelay);
-  }
-
-  function log(_message) {
-    let message = `💿 ${_message}`;
-    console.log(message);
-    broadcast({
-      type: "LOG",
-      message
-    });
-  }
-
-  let closeWatcher = await compiler.watch(config$1, {
-    mode,
-    onInitialBuild,
-
-    onRebuildStart() {
-      start = Date.now();
-      onRebuildStart === null || onRebuildStart === void 0 ? void 0 : onRebuildStart();
-      log("Rebuilding...");
-    },
-
-    onRebuildFinish() {
-      log(`Rebuilt in ${prettyMs__default["default"](Date.now() - start)}`);
-      broadcast({
-        type: "RELOAD"
-      });
-    },
-
-    onFileCreated(file) {
-      log(`File created: ${path__namespace.relative(process.cwd(), file)}`);
-    },
-
-    onFileChanged(file) {
-      log(`File changed: ${path__namespace.relative(process.cwd(), file)}`);
-    },
-
-    onFileDeleted(file) {
-      log(`File deleted: ${path__namespace.relative(process.cwd(), file)}`);
-    }
-
-  });
-  console.log(`💿 Built in ${prettyMs__default["default"](Date.now() - start)}`);
-  let resolve;
-  exitHook__default["default"](() => {
-    resolve();
-  });
-  return new Promise(r => {
-    resolve = r;
-  }).then(async () => {
-    wss.close();
-    await closeWatcher();
-    fse__namespace.emptyDirSync(config$1.assetsBuildDirectory);
-    fse__namespace.emptyDirSync(config$1.serverBuildDirectory);
-  });
-}
-async function dev(remixRoot, modeArg) {
-  // TODO: Warn about the need to install @remix-run/serve if it isn't there?
-  let createApp;
-  let express;
-
-  try {
-    let serve = require("@remix-run/serve");
-
-    createApp = serve.createApp;
-    express = require("express");
-  } catch (err) {
-    throw new Error("Could not locate @remix-run/serve. Please verify you have it installed to use the dev command.");
-  }
-
-  let config$1 = await config.readConfig(remixRoot);
-  let mode = build$1.isBuildMode(modeArg) ? modeArg : build$1.BuildMode.Development;
-  let port = process.env.PORT || 3000;
-  let app = express();
-  app.use((_, __, next) => {
-    purgeAppRequireCache(config$1.serverBuildDirectory);
-    next();
-  });
-  app.use(createApp(config$1.serverBuildDirectory, mode));
-  let server = null;
-
-  try {
-    await watch(config$1, mode, {
-      onInitialBuild: () => {
-        var _Object$values$flat$f;
-
-        let address = (_Object$values$flat$f = Object.values(os__default["default"].networkInterfaces()).flat().find(ip => (ip === null || ip === void 0 ? void 0 : ip.family) == "IPv4" && !ip.internal)) === null || _Object$values$flat$f === void 0 ? void 0 : _Object$values$flat$f.address;
-
-        if (!address) {
-          throw new Error("Could not find an IPv4 address.");
-        }
-
-        server = app.listen(port, () => {
-          console.log(`Remix App Server started at http://${address}:${port}`);
-        });
-      }
-    });
-  } finally {
-    var _server;
-
-    (_server = server) === null || _server === void 0 ? void 0 : _server.close();
-  }
-}
-
-function purgeAppRequireCache(buildPath) {
-  for (let key in require.cache) {
-    if (key.startsWith(buildPath)) {
-      delete require.cache[key];
-    }
-  }
-}
-
-exports.build = build;
-exports.dev = dev;
-exports.routes = routes;
-exports.setup = setup;
-exports.watch = watch;
+ 'use strict';
+
+ Object.defineProperty(exports, '__esModule', { value: true });
+
+ var path = require('path');
+ var os = require('os');
+ var fse = require('fs-extra');
+ var exitHook = require('exit-hook');
+ var prettyMs = require('pretty-ms');
+ var WebSocket = require('ws');
+ var build$1 = require('../build.js');
+ var compiler = require('../compiler.js');
+ var config = require('../config.js');
+ var format = require('../config/format.js');
+ var setup$1 = require('../setup.js');
+
+ function _interopDefaultLegacy (e) { return e && typeof e === 'object' && 'default' in e ? e : { 'default': e }; }
+
+ function _interopNamespace(e) {
+   if (e && e.__esModule) return e;
+   var n = Object.create(null);
+   if (e) {
+     Object.keys(e).forEach(function (k) {
+       if (k !== 'default') {
+         var d = Object.getOwnPropertyDescriptor(e, k);
+         Object.defineProperty(n, k, d.get ? d : {
+           enumerable: true,
+           get: function () { return e[k]; }
+         });
+       }
+     });
+   }
+   n["default"] = e;
+   return Object.freeze(n);
+ }
+
+ var path__namespace = /*#__PURE__*/_interopNamespace(path);
+ var os__default = /*#__PURE__*/_interopDefaultLegacy(os);
+ var fse__namespace = /*#__PURE__*/_interopNamespace(fse);
+ var exitHook__default = /*#__PURE__*/_interopDefaultLegacy(exitHook);
+ var prettyMs__default = /*#__PURE__*/_interopDefaultLegacy(prettyMs);
+ var WebSocket__default = /*#__PURE__*/_interopDefaultLegacy(WebSocket);
+
+ async function setup(platformArg) {
+   let platform = setup$1.isSetupPlatform(platformArg) ? platformArg : setup$1.SetupPlatform.Node;
+   await setup$1.setupRemix(platform);
+   console.log(`Successfully setup Remix for ${platform}.`);
+ }
+ async function routes(remixRoot, formatArg) {
+   let config$1 = await config.readConfig(remixRoot);
+   let format$1 = format.isRoutesFormat(formatArg) ? formatArg : format.RoutesFormat.jsx;
+   console.log(format.formatRoutes(config$1.routes, format$1));
+ }
+ async function build(remixRoot, modeArg, sourcemap = false) {
+   let mode = build$1.isBuildMode(modeArg) ? modeArg : build$1.BuildMode.Production;
+   console.log(`Building Remix app in ${mode} mode...`);
+
+   if (modeArg === build$1.BuildMode.Production && sourcemap) {
+     console.warn("\n⚠️⚠️⚠️⚠️⚠️⚠️⚠️⚠️⚠️⚠️⚠️⚠️⚠️⚠️⚠️⚠️⚠️⚠️⚠️⚠️⚠️⚠️⚠️⚠️⚠️⚠️⚠️⚠️⚠️⚠️⚠️⚠️⚠️⚠️⚠️⚠️⚠️⚠️⚠️⚠️⚠️⚠️");
+     console.warn("You have enabled source maps in production. This will make your server side code visible to the public and is highly discouraged! If you insist, please ensure you are using environment variables for secrets and not hard-coding them into your source!");
+     console.warn("⚠️⚠️⚠️⚠️⚠️⚠️⚠️⚠️⚠️⚠️⚠️⚠️⚠️⚠️⚠️⚠️⚠️⚠️⚠️⚠️⚠️⚠️⚠️⚠️⚠️⚠️⚠️⚠️⚠️⚠️⚠️⚠️⚠️⚠️⚠️⚠️⚠️⚠️⚠️⚠️⚠️⚠️\n");
+   }
+
+   let start = Date.now();
+   let config$1 = await config.readConfig(remixRoot);
+   await compiler.build(config$1, {
+     mode: mode,
+     sourcemap
+   });
+   console.log(`Built in ${prettyMs__default["default"](Date.now() - start)}`);
+ }
+ async function watch(remixRootOrConfig, modeArg, callbacks) {
+   let {
+     onInitialBuild,
+     onRebuildStart
+   } = callbacks || {};
+   let mode = build$1.isBuildMode(modeArg) ? modeArg : build$1.BuildMode.Development;
+   console.log(`Watching Remix app in ${mode} mode...`);
+   let start = Date.now();
+   let config$1 = typeof remixRootOrConfig === "object" ? remixRootOrConfig : await config.readConfig(remixRootOrConfig);
+   let wss = new WebSocket__default["default"].Server({
+     port: config$1.devServerPort
+   });
+
+   function broadcast(event) {
+     setTimeout(() => {
+       wss.clients.forEach(client => {
+         if (client.readyState === WebSocket__default["default"].OPEN) {
+           client.send(JSON.stringify(event));
+         }
+       });
+     }, config$1.devServerBroadcastDelay);
+   }
+
+   function log(_message) {
+     let message = `💿 ${_message}`;
+     console.log(message);
+     broadcast({
+       type: "LOG",
+       message
+     });
+   }
+
+   let closeWatcher = await compiler.watch(config$1, {
+     mode,
+     onInitialBuild,
+
+     onRebuildStart() {
+       start = Date.now();
+       onRebuildStart === null || onRebuildStart === void 0 ? void 0 : onRebuildStart();
+       log("Rebuilding...");
+     },
+
+     onRebuildFinish() {
+       log(`Rebuilt in ${prettyMs__default["default"](Date.now() - start)}`);
+       broadcast({
+         type: "RELOAD"
+       });
+     },
+
+     onFileCreated(file) {
+       log(`File created: ${path__namespace.relative(process.cwd(), file)}`);
+     },
+
+     onFileChanged(file) {
+       log(`File changed: ${path__namespace.relative(process.cwd(), file)}`);
+     },
+
+     onFileDeleted(file) {
+       log(`File deleted: ${path__namespace.relative(process.cwd(), file)}`);
+     }
+
+   });
+   console.log(`💿 Built in ${prettyMs__default["default"](Date.now() - start)}`);
+   let resolve;
+   exitHook__default["default"](() => {
+     resolve();
+   });
+   return new Promise(r => {
+     resolve = r;
+   }).then(async () => {
+     wss.close();
+     await closeWatcher();
+     fse__namespace.emptyDirSync(config$1.assetsBuildDirectory);
+     fse__namespace.emptyDirSync(config$1.serverBuildDirectory);
+   });
+ }
+ async function dev(remixRoot, modeArg) {
+   // TODO: Warn about the need to install @remix-run/serve if it isn't there?
+   let createApp;
+   let express;
+
+   try {
+     let serve = require("@remix-run/serve");
+
+     createApp = serve.createApp;
+     express = require("express");
+   } catch (err) {
+     throw new Error("Could not locate @remix-run/serve. Please verify you have it installed to use the dev command.");
+   }
+
+   let config$1 = await config.readConfig(remixRoot);
+   let mode = build$1.isBuildMode(modeArg) ? modeArg : build$1.BuildMode.Development;
+   let port = process.env.PORT || 3000;
+   let app = express();
+   app.use((_, __, next) => {
+     purgeAppRequireCache(config$1.serverBuildDirectory);
+     next();
+   });
+
+   app.use(await createApp(config$1.serverBuildDirectory, mode));
+   let server = null;
+
+   try {
+     await watch(config$1, mode, {
+       onInitialBuild: () => {
+         var _Object$values$flat$f;
+
+         let address = (_Object$values$flat$f = Object.values(os__default["default"].networkInterfaces()).flat().find(ip => (ip === null || ip === void 0 ? void 0 : ip.family) == "IPv4" && !ip.internal)) === null || _Object$values$flat$f === void 0 ? void 0 : _Object$values$flat$f.address;
+
+         if (!address) {
+           throw new Error("Could not find an IPv4 address.");
+         }
+
+         server = app.listen(port, () => {
+           console.log(`Remix App Server started at http://${address}:${port}`);
+         });
+       }
+     });
+   } finally {
+     var _server;
+
+     (_server = server) === null || _server === void 0 ? void 0 : _server.close();
+   }
+ }
+
+ function purgeAppRequireCache(buildPath) {
+   for (let key in require.cache) {
+     if (key.startsWith(buildPath)) {
+       delete require.cache[key];
+     }
+   }
+ }
+
+ exports.build = build;
+ exports.dev = dev;
+ exports.routes = routes;
+ exports.setup = setup;
+ exports.watch = watch;
diff --git a/node_modules/@remix-run/dev/compiler/.DS_Store b/node_modules/@remix-run/dev/compiler/.DS_Store
new file mode 100644
index 0000000..b6a6b35
Binary files /dev/null and b/node_modules/@remix-run/dev/compiler/.DS_Store differ
diff --git a/node_modules/@remix-run/dev/config.d.ts b/node_modules/@remix-run/dev/config.d.ts
index 29e1aa9..a945381 100644
--- a/node_modules/@remix-run/dev/config.d.ts
+++ b/node_modules/@remix-run/dev/config.d.ts
@@ -5,6 +5,7 @@ export interface RemixMdxConfig {
     remarkPlugins?: any[];
 }
 export declare type RemixMdxConfigFunction = (filename: string) => Promise<RemixMdxConfig | undefined> | RemixMdxConfig | undefined;
+export type ModuleFormat = "esm" | "cjs";
 /**
  * The user-provided config in `remix.config.js`.
  */
@@ -61,7 +62,7 @@ export interface AppConfig {
     /**
      * The output format of the server build. Defaults to "cjs".
      */
-    serverModuleFormat?: "esm" | "cjs";
+    serverModuleFormat?: ModuleFormat;
     /**
      * The platform the server build is targeting. Defaults to "node".
      */
@@ -132,7 +133,7 @@ export interface RemixConfig {
     /**
      * The output format of the server build. Defaults to "cjs".
      */
-    serverModuleFormat: "esm" | "cjs";
+    serverModuleFormat: ModuleFormat;
     /**
      * The platform the server build is targeting. Defaults to "node".
      */
diff --git a/node_modules/@remix-run/dev/config.js b/node_modules/@remix-run/dev/config.js
index 7e88e8d..f113a0a 100644
--- a/node_modules/@remix-run/dev/config.js
+++ b/node_modules/@remix-run/dev/config.js
@@ -8,150 +8,157 @@
  *
  * @license MIT
  */
-'use strict';
-
-Object.defineProperty(exports, '__esModule', { value: true });
-
-var fs = require('fs');
-var path = require('path');
-var routes = require('./config/routes.js');
-var routesConvention = require('./config/routesConvention.js');
-var serverModes = require('./config/serverModes.js');
-
-function _interopNamespace(e) {
-  if (e && e.__esModule) return e;
-  var n = Object.create(null);
-  if (e) {
-    Object.keys(e).forEach(function (k) {
-      if (k !== 'default') {
-        var d = Object.getOwnPropertyDescriptor(e, k);
-        Object.defineProperty(n, k, d.get ? d : {
-          enumerable: true,
-          get: function () { return e[k]; }
-        });
-      }
-    });
-  }
-  n["default"] = e;
-  return Object.freeze(n);
-}
-
-var fs__namespace = /*#__PURE__*/_interopNamespace(fs);
-var path__namespace = /*#__PURE__*/_interopNamespace(path);
-
-/**
- * Returns a fully resolved config object from the remix.config.js in the given
- * root directory.
- */
-async function readConfig(remixRoot, serverMode = serverModes.ServerMode.Production) {
-  if (!remixRoot) {
-    remixRoot = process.env.REMIX_ROOT || process.cwd();
-  }
-
-  if (!serverModes.isValidServerMode(serverMode)) {
-    throw new Error(`Invalid server mode "${serverMode}"`);
-  }
-
-  let rootDirectory = path__namespace.resolve(remixRoot);
-  let configFile = path__namespace.resolve(rootDirectory, "remix.config.js");
-  let appConfig;
-
-  try {
-    appConfig = require(configFile);
-  } catch (error) {
-    throw new Error(`Error loading Remix config in ${configFile}`);
-  }
-
-  let serverModuleFormat = appConfig.serverModuleFormat || "cjs";
-  let serverPlatform = appConfig.serverPlatform || "node";
-  let mdx = appConfig.mdx;
-  let appDirectory = path__namespace.resolve(rootDirectory, appConfig.appDirectory || "app");
-  let cacheDirectory = path__namespace.resolve(rootDirectory, appConfig.cacheDirectory || ".cache");
-  let entryClientFile = findEntry(appDirectory, "entry.client");
-
-  if (!entryClientFile) {
-    throw new Error(`Missing "entry.client" file in ${appDirectory}`);
-  }
-
-  let entryServerFile = findEntry(appDirectory, "entry.server");
-
-  if (!entryServerFile) {
-    throw new Error(`Missing "entry.server" file in ${appDirectory}`);
-  }
-
-  let serverBuildDirectory = path__namespace.resolve(rootDirectory, appConfig.serverBuildDirectory || "build");
-  let assetsBuildDirectory = path__namespace.resolve(rootDirectory, appConfig.assetsBuildDirectory || appConfig.browserBuildDirectory || path__namespace.join("public", "build"));
-  let devServerPort = appConfig.devServerPort || 8002;
-  let devServerBroadcastDelay = appConfig.devServerBroadcastDelay || 0;
-  let publicPath = addTrailingSlash(appConfig.publicPath || "/build/");
-  let rootRouteFile = findEntry(appDirectory, "root");
-
-  if (!rootRouteFile) {
-    throw new Error(`Missing "root" route file in ${appDirectory}`);
-  }
-
-  let routes$1 = {
-    root: {
-      path: "",
-      id: "root",
-      file: rootRouteFile
-    }
-  };
-
-  if (fs__namespace.existsSync(path__namespace.resolve(appDirectory, "routes"))) {
-    let conventionalRoutes = routesConvention.defineConventionalRoutes(appDirectory, appConfig.ignoredRouteFiles);
-
-    for (let key of Object.keys(conventionalRoutes)) {
-      let route = conventionalRoutes[key];
-      routes$1[route.id] = { ...route,
-        parentId: route.parentId || "root"
-      };
-    }
-  }
-
-  if (appConfig.routes) {
-    let manualRoutes = await appConfig.routes(routes.defineRoutes);
-
-    for (let key of Object.keys(manualRoutes)) {
-      let route = manualRoutes[key];
-      routes$1[route.id] = { ...route,
-        parentId: route.parentId || "root"
-      };
-    }
-  }
-
-  return {
-    appDirectory,
-    cacheDirectory,
-    entryClientFile,
-    entryServerFile,
-    devServerPort,
-    devServerBroadcastDelay,
-    assetsBuildDirectory,
-    publicPath,
-    rootDirectory,
-    routes: routes$1,
-    serverBuildDirectory,
-    serverMode,
-    serverModuleFormat,
-    serverPlatform,
-    mdx
-  };
-}
-
-function addTrailingSlash(path) {
-  return path.endsWith("/") ? path : path + "/";
-}
-
-const entryExts = [".js", ".jsx", ".ts", ".tsx"];
-
-function findEntry(dir, basename) {
-  for (let ext of entryExts) {
-    let file = path__namespace.resolve(dir, basename + ext);
-    if (fs__namespace.existsSync(file)) return path__namespace.relative(dir, file);
-  }
-
-  return undefined;
-}
-
-exports.readConfig = readConfig;
+ 'use strict';
+
+ Object.defineProperty(exports, '__esModule', { value: true });
+
+ var fs = require('fs');
+ var path = require('path');
+ var routes = require('./config/routes.js');
+ var routesConvention = require('./config/routesConvention.js');
+ var serverModes = require('./config/serverModes.js');
+
+ function _interopNamespace(e) {
+   if (e && e.__esModule) return e;
+   var n = Object.create(null);
+   if (e) {
+     Object.keys(e).forEach(function (k) {
+       if (k !== 'default') {
+         var d = Object.getOwnPropertyDescriptor(e, k);
+         Object.defineProperty(n, k, d.get ? d : {
+           enumerable: true,
+           get: function () { return e[k]; }
+         });
+       }
+     });
+   }
+   n["default"] = e;
+   return Object.freeze(n);
+ }
+
+ var fs__namespace = /*#__PURE__*/_interopNamespace(fs);
+ var path__namespace = /*#__PURE__*/_interopNamespace(path);
+
+ /**
+  * Returns a fully resolved config object from the remix.config.js in the given
+  * root directory.
+  */
+ async function readConfig(remixRoot, serverMode = serverModes.ServerMode.Production) {
+   if (!remixRoot) {
+     remixRoot = process.env.REMIX_ROOT || process.cwd();
+   }
+
+   var packageJson = await import(`${remixRoot}/package.json`);
+   var moduleFormat = packageJson.type === "module" ? "esm" : "cjs";
+
+   if (!serverModes.isValidServerMode(serverMode)) {
+     throw new Error(`Invalid server mode "${serverMode}"`);
+   }
+
+   let rootDirectory = path__namespace.resolve(remixRoot);
+   let configFile = path__namespace.resolve(rootDirectory, "remix.config.js");
+   let appConfig;
+
+   try {
+     appConfig = await import(configFile);
+
+     if ("default" in appConfig) {
+       appConfig = appConfig.default;
+     }
+   } catch (error) {
+     throw new Error(`Error loading Remix config in ${configFile}`);
+   }
+
+   let serverModuleFormat = appConfig.serverModuleFormat || moduleFormat;
+   let serverPlatform = appConfig.serverPlatform || "node";
+   let mdx = appConfig.mdx;
+   let appDirectory = path__namespace.resolve(rootDirectory, appConfig.appDirectory || "app");
+   let cacheDirectory = path__namespace.resolve(rootDirectory, appConfig.cacheDirectory || ".cache");
+   let entryClientFile = findEntry(appDirectory, "entry.client");
+
+   if (!entryClientFile) {
+     throw new Error(`Missing "entry.client" file in ${appDirectory}`);
+   }
+
+   let entryServerFile = findEntry(appDirectory, "entry.server");
+
+   if (!entryServerFile) {
+     throw new Error(`Missing "entry.server" file in ${appDirectory}`);
+   }
+
+   let serverBuildDirectory = path__namespace.resolve(rootDirectory, appConfig.serverBuildDirectory || "build");
+   let assetsBuildDirectory = path__namespace.resolve(rootDirectory, appConfig.assetsBuildDirectory || appConfig.browserBuildDirectory || path__namespace.join("public", "build"));
+   let devServerPort = appConfig.devServerPort || 8002;
+   let devServerBroadcastDelay = appConfig.devServerBroadcastDelay || 0;
+   let publicPath = addTrailingSlash(appConfig.publicPath || "/build/");
+   let rootRouteFile = findEntry(appDirectory, "root");
+
+   if (!rootRouteFile) {
+     throw new Error(`Missing "root" route file in ${appDirectory}`);
+   }
+
+   let routes$1 = {
+     root: {
+       path: "",
+       id: "root",
+       file: rootRouteFile
+     }
+   };
+
+   if (fs__namespace.existsSync(path__namespace.resolve(appDirectory, "routes"))) {
+     let conventionalRoutes = routesConvention.defineConventionalRoutes(appDirectory, appConfig.ignoredRouteFiles);
+
+     for (let key of Object.keys(conventionalRoutes)) {
+       let route = conventionalRoutes[key];
+       routes$1[route.id] = { ...route,
+         parentId: route.parentId || "root"
+       };
+     }
+   }
+
+   if (appConfig.routes) {
+     let manualRoutes = await appConfig.routes(routes.defineRoutes);
+
+     for (let key of Object.keys(manualRoutes)) {
+       let route = manualRoutes[key];
+       routes$1[route.id] = { ...route,
+         parentId: route.parentId || "root"
+       };
+     }
+   }
+
+   return {
+     appDirectory,
+     cacheDirectory,
+     entryClientFile,
+     entryServerFile,
+     devServerPort,
+     devServerBroadcastDelay,
+     assetsBuildDirectory,
+     publicPath,
+     rootDirectory,
+     routes: routes$1,
+     serverBuildDirectory,
+     serverMode,
+     serverModuleFormat,
+     serverPlatform,
+     mdx
+   };
+ }
+
+ function addTrailingSlash(path) {
+   return path.endsWith("/") ? path : path + "/";
+ }
+
+ const entryExts = [".js", ".jsx", ".ts", ".tsx"];
+
+ function findEntry(dir, basename) {
+   for (let ext of entryExts) {
+     let file = path__namespace.resolve(dir, basename + ext);
+     if (fs__namespace.existsSync(file)) return path__namespace.relative(dir, file);
+   }
+
+   return undefined;
+ }
+
+ exports.readConfig = readConfig;
